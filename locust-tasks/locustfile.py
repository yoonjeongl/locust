import re, json, random, base64

from locust import HttpUser, task
from pyquery import PyQuery as pq

class QuickstartUser(HttpUser):

    global idp_url, www_url, USER_CREDENTIALS
    idp_url = "https://idp.psup.amway.co.kr"
    www_url = "https://www.psup.amway.co.kr"
    USER_CREDENTIALS = [
        ("116465", "1234"),
        ("135996", "1234"),
        ("167999", "1234"),
        ("185483", "1234"),
        ("202402", "1234"),
        ("217981", "1234"),
        ("234701", "1234"),
        ("235368", "1234"),
        ("247621", "1234"),
        ("266781", "1234"),
        ("267158", "1234"),
        ("274770", "1234"),
        ("292258", "1234"),
        ("304586", "1234"),
        ("315367", "1234"),
        ("316196", "1234"),
        ("319535", "1234"),
        ("322560", "1234"),
        ("342896", "1234"),
        ("343444", "1234"),
        ("348186", "1234"),
        ("362604", "1234"),
        ("372561", "1234"),
        ("373644", "1234"),
        ("379781", "1234"),
        ("387364", "1234"),
        ("388163", "1234"),
        ("391970", "1234"),
        ("413894", "1234"),
        ("414601", "1234"),
        ("426925", "1234"),
        ("443996", "1234"),
        ("465555", "1234"),
        ("470734", "1234"),
        ("470854", "1234"),
        ("472064", "1234"),
        ("482372", "1234"),
        ("488562", "1234"),
        ("494267", "1234"),
        ("498098", "1234"),
        ("513989", "1234"),
        ("519025", "1234"),
        ("523015", "1234"),
        ("543814", "1234"),
        ("546133", "1234"),
        ("554303", "1234"),
        ("583060", "1234"),
        ("593555", "1234"),
        ("611429", "1234"),
        ("618102", "1234"),
        ("618246", "1234"),
        ("626907", "1234"),
        ("642171", "1234"),
        ("653031", "1234"),
        ("1001646", "1234"),
        ("1002706", "1234"),
        ("1014463", "1234"),
        ("1021706", "1234"),
        ("1022322", "1234"),
        ("1022350", "1234"),
        ("1026070", "1234"),
        ("1029167", "1234"),
        ("1035266", "1234"),
        ("1042893", "1234"),
        ("1044467", "1234"),
        ("1059009", "1234"),
        ("1065238", "1234"),
        ("1067533", "1234"),
        ("1069622", "1234"),
        ("1073688", "1234"),
        ("1081895", "1234"),
        ("1087419", "1234"),
        ("1088338", "1234"),
        ("1091003", "1234"),
        ("1123121", "1234"),
        ("1125036", "1234"),
        ("1128509", "1234"),
        ("1129056", "1234"),
        ("1131347", "1234"),
        ("1134216", "1234"),
        ("1141558", "1234"),
        ("1149470", "1234"),
        ("1149477", "1234"),
        ("1151049", "1234"),
        ("1151098", "1234"),
        ("1154907", "1234"),
        ("1161853", "1234"),
        ("1164214", "1234"),
        ("1164618", "1234"),
        ("1164789", "1234"),
        ("1164805", "1234"),
        ("1170856", "1234"),
        ("1171711", "1234"),
        ("1175988", "1234"),
        ("1176311", "1234"),
        ("1180105", "1234"),
        ("1193102", "1234"),
        ("1196388", "1234"),
        ("1205387", "1234"),
        ("1211558", "1234"),
        ("1216361", "1234"),
        ("1228652", "1234"),
        ("1233654", "1234"),
        ("1235530", "1234"),
        ("1241018", "1234"),
        ("1251567", "1234"),
        ("1255533", "1234"),
        ("1258918", "1234"),
        ("1261787", "1234"),
        ("1266704", "1234"),
        ("1275964", "1234"),
        ("1291936", "1234"),
        ("1293507", "1234"),
        ("1299140", "1234"),
        ("1301384", "1234"),
        ("1301592", "1234"),
        ("1314268", "1234"),
        ("1322060", "1234"),
        ("1324347", "1234"),
        ("1330472", "1234"),
        ("1342128", "1234"),
        ("1342847", "1234"),
        ("1343536", "1234"),
        ("1348266", "1234"),
        ("1348818", "1234"),
        ("1349139", "1234"),
        ("1357841", "1234"),
        ("1361313", "1234"),
        ("1361842", "1234"),
        ("1368123", "1234"),
        ("1378792", "1234"),
        ("1391059", "1234"),
        ("1392489", "1234"),
        ("1393723", "1234"),
        ("1396073", "1234"),
        ("1400892", "1234"),
        ("1409831", "1234"),
        ("1412757", "1234"),
        ("1413168", "1234"),
        ("1443439", "1234"),
        ("1470346", "1234"),
        ("1480782", "1234"),
        ("1495136", "1234"),
        ("1500048", "1234"),
        ("1506103", "1234"),
        ("1506285", "1234"),
        ("1512200", "1234"),
        ("1514562", "1234"),
        ("1518890", "1234"),
        ("1520033", "1234"),
        ("1525569", "1234"),
        ("1527220", "1234"),
        ("1538904", "1234"),
        ("1544461", "1234"),
        ("1544976", "1234"),
        ("1560060", "1234"),
        ("1573146", "1234"),
        ("1580500", "1234"),
        ("1583970", "1234"),
        ("1595004", "1234"),
        ("1601737", "1234"),
        ("1611662", "1234"),
        ("1628187", "1234"),
        ("1652263", "1234"),
        ("1652629", "1234"),
        ("1685356", "1234"),
        ("1686373", "1234"),
        ("1688535", "1234"),
        ("1692154", "1234"),
        ("1701015", "1234"),
        ("1718699", "1234"),
        ("1726173", "1234"),
        ("1726781", "1234"),
        ("1726999", "1234"),
        ("1729038", "1234"),
        ("1729156", "1234"),
        ("1743211", "1234"),
        ("1749077", "1234"),
        ("1749684", "1234"),
        ("1751466", "1234"),
        ("1755646", "1234"),
        ("1763309", "1234"),
        ("1772428", "1234"),
        ("1793730", "1234"),
        ("1802727", "1234"),
        ("1805035", "1234"),
        ("1805333", "1234"),
        ("1815532", "1234"),
        ("1817713", "1234"),
        ("1841545", "1234"),
        ("1893582", "1234"),
        ("1916572", "1234"),
        ("1918689", "1234"),
        ("1924959", "1234"),
        ("1936269", "1234"),
        ("1942275", "1234"),
        ("1952811", "1234"),
        ("1980625", "1234"),
        ("1980729", "1234"),
        ("1988052", "1234"),
        ("2004063", "1234"),
        ("2022337", "1234"),
        ("2026979", "1234"),
        ("2028352", "1234"),
        ("2032259", "1234"),
        ("2061070", "1234"),
        ("2088263", "1234"),
        ("2099725", "1234"),
        ("2118109", "1234"),
        ("2119093", "1234"),
        ("2127320", "1234"),
        ("2136962", "1234"),
        ("2166613", "1234"),
        ("2167456", "1234"),
        ("2186415", "1234"),
        ("2189457", "1234"),
        ("2192569", "1234"),
        ("2198239", "1234"),
        ("2226217", "1234"),
        ("2268837", "1234"),
        ("2306013", "1234"),
        ("2311950", "1234"),
        ("2347617", "1234"),
        ("2351267", "1234"),
        ("2376961", "1234"),
        ("2377819", "1234"),
        ("2389928", "1234"),
        ("2401352", "1234"),
        ("2443224", "1234"),
        ("2450198", "1234"),
        ("2451642", "1234"),
        ("2478115", "1234"),
        ("2492591", "1234"),
        ("2501797", "1234"),
        ("2530219", "1234"),
        ("2539108", "1234"),
        ("2545951", "1234"),
        ("2572956", "1234"),
        ("2583624", "1234"),
        ("2606556", "1234"),
        ("2642753", "1234"),
        ("2724629", "1234"),
        ("2747687", "1234"),
        ("2753567", "1234"),
        ("2786182", "1234"),
        ("2811558", "1234"),
        ("2814597", "1234"),
        ("2846173", "1234"),
        ("2870120", "1234"),
        ("2889225", "1234"),
        ("2895528", "1234"),
        ("2926493", "1234"),
        ("2947530", "1234"),
        ("2972633", "1234"),
        ("2975641", "1234"),
        ("3035136", "1234"),
        ("3043986", "1234"),
        ("3047092", "1234"),
        ("3097714", "1234"),
        ("3131950", "1234"),
        ("3189193", "1234"),
        ("3222435", "1234"),
        ("3222738", "1234"),
        ("3280009", "1234"),
        ("3299543", "1234"),
        ("3306673", "1234"),
        ("3316906", "1234"),
        ("3324443", "1234"),
        ("3343246", "1234"),
        ("3344650", "1234"),
        ("3347544", "1234"),
        ("3350979", "1234"),
        ("3368185", "1234"),
        ("3373444", "1234"),
        ("3380461", "1234"),
        ("3391067", "1234"),
        ("3414827", "1234"),
        ("3426437", "1234"),
        ("3428739", "1234"),
        ("3440938", "1234"),
        ("3462071", "1234"),
        ("3463046", "1234"),
        ("3463718", "1234"),
        ("3468132", "1234"),
        ("3477172", "1234"),
        ("3496786", "1234"),
        ("3534505", "1234"),
        ("3540771", "1234"),
        ("3562707", "1234"),
        ("3575769", "1234"),
        ("3609656", "1234"),
        ("3635762", "1234"),
        ("3650984", "1234"),
        ("3695629", "1234"),
        ("3706694", "1234"),
        ("3710186", "1234"),
        ("3717857", "1234"),
        ("3732960", "1234"),
        ("3775276", "1234"),
        ("3788551", "1234"),
        ("3788627", "1234"),
        ("3803017", "1234"),
        ("3817280", "1234"),
        ("3830125", "1234"),
        ("3834132", "1234"),
        ("3837762", "1234"),
        ("3868480", "1234"),
        ("3876422", "1234"),
        ("3888253", "1234"),
        ("3910352", "1234"),
        ("3927398", "1234"),
        ("3942614", "1234"),
        ("3950495", "1234"),
        ("3966752", "1234"),
        ("3990117", "1234"),
        ("4022147", "1234"),
        ("4029211", "1234"),
        ("4042152", "1234"),
        ("4047371", "1234"),
        ("4050251", "1234"),
        ("4062000", "1234"),
        ("4088447", "1234"),
        ("4128288", "1234"),
        ("4134561", "1234"),
        ("4164630", "1234"),
        ("4190509", "1234"),
        ("4196584", "1234"),
        ("4203560", "1234"),
        ("4209571", "1234"),
        ("4212314", "1234"),
        ("4237549", "1234"),
        ("4238969", "1234"),
        ("4252464", "1234"),
        ("4253685", "1234"),
        ("4255173", "1234"),
        ("4263482", "1234"),
        ("4269743", "1234"),
        ("4271678", "1234"),
        ("4273944", "1234"),
        ("4276602", "1234"),
        ("4276670", "1234"),
        ("4281753", "1234"),
        ("4294823", "1234"),
        ("4310313", "1234"),
        ("4357142", "1234"),
        ("4399266", "1234"),
        ("4411519", "1234"),
        ("4419537", "1234"),
        ("4423365", "1234"),
        ("4449420", "1234"),
        ("4457374", "1234"),
        ("4463510", "1234"),
        ("4465529", "1234"),
        ("4467726", "1234"),
        ("4478147", "1234"),
        ("4503189", "1234"),
        ("4505395", "1234"),
        ("4521193", "1234"),
        ("4522262", "1234"),
        ("4532285", "1234"),
        ("4544807", "1234"),
        ("4550579", "1234"),
        ("4557653", "1234"),
        ("4574733", "1234"),
        ("4615442", "1234"),
        ("4626527", "1234"),
        ("4637357", "1234"),
        ("4648608", "1234"),
        ("4654368", "1234"),
        ("4670876", "1234"),
        ("4672055", "1234"),
        ("4678122", "1234"),
        ("4678497", "1234"),
        ("4682869", "1234"),
        ("4689151", "1234"),
        ("4706137", "1234"),
        ("4714794", "1234"),
        ("4720996", "1234"),
        ("4732255", "1234"),
        ("4732931", "1234"),
        ("4736641", "1234"),
        ("4747261", "1234"),
        ("4755833", "1234"),
        ("4757103", "1234"),
        ("4758151", "1234"),
        ("4759841", "1234"),
        ("4796117", "1234"),
        ("4837097", "1234"),
        ("4838861", "1234"),
        ("4845835", "1234"),
        ("4866399", "1234"),
        ("4867119", "1234"),
        ("4907040", "1234"),
        ("4912029", "1234"),
        ("4914648", "1234"),
        ("4934088", "1234"),
        ("4937992", "1234"),
        ("4947377", "1234"),
        ("4949757", "1234"),
        ("4961007", "1234"),
        ("4963902", "1234"),
        ("4968701", "1234"),
        ("4969332", "1234"),
        ("4969343", "1234"),
        ("4972112", "1234"),
        ("4977116", "1234"),
        ("4981091", "1234"),
        ("4983241", "1234"),
        ("4985846", "1234"),
        ("5003419", "1234"),
        ("5023291", "1234"),
        ("5024121", "1234"),
        ("5029846", "1234"),
        ("5033712", "1234"),
        ("5040219", "1234"),
        ("5048908", "1234"),
        ("5048937", "1234"),
        ("5049531", "1234"),
        ("5054227", "1234"),
        ("5057123", "1234"),
        ("5070931", "1234"),
        ("5071618", "1234"),
        ("5074320", "1234"),
        ("5088635", "1234"),
        ("5095353", "1234"),
        ("5096409", "1234"),
        ("5101037", "1234"),
        ("5121296", "1234"),
        ("5136408", "1234"),
        ("5144941", "1234"),
        ("5145037", "1234"),
        ("5167388", "1234"),
        ("5170355", "1234"),
        ("5189981", "1234"),
        ("5196556", "1234"),
        ("5204222", "1234"),
        ("5229804", "1234"),
        ("5231066", "1234"),
        ("5253523", "1234"),
        ("5261151", "1234"),
        ("5261476", "1234"),
        ("5264783", "1234"),
        ("5279505", "1234"),
        ("5280572", "1234"),
        ("5280688", "1234"),
        ("5285736", "1234"),
        ("5299584", "1234"),
        ("5320157", "1234"),
        ("5324384", "1234"),
        ("5343886", "1234"),
        ("5357292", "1234"),
        ("5372088", "1234"),
        ("5382269", "1234"),
        ("5392147", "1234"),
        ("5394633", "1234"),
        ("5400312", "1234"),
        ("5401647", "1234"),
        ("5406659", "1234"),
        ("5425228", "1234"),
        ("5435425", "1234"),
        ("5437215", "1234"),
        ("5439608", "1234"),
        ("5445145", "1234"),
        ("5456706", "1234"),
        ("5458498", "1234"),
        ("5462168", "1234"),
        ("5469118", "1234"),
        ("5474812", "1234"),
        ("5475622", "1234"),
        ("5500877", "1234"),
        ("5506588", "1234"),
        ("5510463", "1234"),
        ("5510926", "1234"),
        ("5525181", "1234"),
        ("5528280", "1234"),
        ("5528597", "1234"),
        ("5550756", "1234"),
        ("5559581", "1234"),
        ("5564914", "1234"),
        ("5567722", "1234"),
        ("5570202", "1234"),
        ("5571895", "1234"),
        ("5582419", "1234"),
        ("5589678", "1234"),
        ("5597458", "1234"),
        ("5605061", "1234"),
        ("5605486", "1234"),
        ("5607804", "1234"),
        ("5611855", "1234"),
        ("5619434", "1234"),
        ("5631474", "1234"),
        ("5641281", "1234"),
        ("5654986", "1234"),
        ("5657778", "1234"),
        ("5668122", "1234"),
        ("5677055", "1234"),
        ("5685969", "1234"),
        ("5690411", "1234"),
        ("5694628", "1234"),
        ("5695744", "1234"),
        ("5723496", "1234"),
        ("5726590", "1234"),
        ("5733979", "1234"),
        ("5742184", "1234"),
        ("5743054", "1234"),
        ("5743464", "1234"),
        ("5755742", "1234"),
        ("5763291", "1234"),
        ("5763527", "1234"),
        ("5767000", "1234"),
        ("5770671", "1234"),
        ("5772957", "1234"),
        ("5786226", "1234"),
        ("5808922", "1234"),
        ("5811579", "1234"),
        ("5812538", "1234"),
        ("5816318", "1234"),
        ("5818597", "1234"),
        ("5822797", "1234"),
        ("5876305", "1234"),
        ("5884961", "1234"),
        ("5885415", "1234"),
        ("5887538", "1234"),
        ("5888634", "1234"),
        ("5889484", "1234"),
        ("5890383", "1234"),
        ("5905618", "1234"),
        ("5908099", "1234"),
        ("5909375", "1234"),
        ("5910651", "1234"),
        ("5913827", "1234"),
        ("5923095", "1234"),
        ("5924147", "1234"),
        ("5925887", "1234"),
        ("5927187", "1234"),
        ("5931402", "1234"),
        ("5952921", "1234"),
        ("5962226", "1234"),
        ("5964520", "1234"),
        ("5967468", "1234"),
        ("5969720", "1234"),
        ("5970923", "1234"),
        ("5978344", "1234"),
        ("5985646", "1234"),
        ("6001799", "1234"),
        ("6025214", "1234"),
        ("6028329", "1234"),
        ("6032855", "1234"),
        ("6036421", "1234"),
        ("6044327", "1234"),
        ("6048809", "1234"),
        ("6049302", "1234"),
        ("6050195", "1234"),
        ("6067260", "1234"),
        ("6076094", "1234"),
        ("6083511", "1234"),
        ("6095978", "1234"),
        ("6107543", "1234"),
        ("6107734", "1234"),
        ("6116274", "1234"),
        ("6130983", "1234"),
        ("6132178", "1234"),
        ("6157015", "1234"),
        ("6159982", "1234"),
        ("6169564", "1234"),
        ("6173986", "1234"),
        ("6194565", "1234"),
        ("6198103", "1234"),
        ("6214421", "1234"),
        ("6218832", "1234"),
        ("6224016", "1234"),
        ("6237234", "1234"),
        ("6242645", "1234"),
        ("6248044", "1234"),
        ("6249358", "1234"),
        ("6280703", "1234"),
        ("6283658", "1234"),
        ("6291884", "1234"),
        ("6310836", "1234"),
        ("6324551", "1234"),
        ("6325737", "1234"),
        ("6339597", "1234"),
        ("6345778", "1234"),
        ("6364572", "1234"),
        ("6394534", "1234"),
        ("6419111", "1234"),
        ("6450342", "1234"),
        ("6451100", "1234"),
        ("6462904", "1234"),
        ("6470777", "1234"),
        ("6488633", "1234"),
        ("6503435", "1234"),
        ("6510243", "1234"),
        ("6527934", "1234"),
        ("6552655", "1234"),
        ("6561590", "1234"),
        ("6567164", "1234"),
        ("6577716", "1234"),
        ("6586469", "1234"),
        ("6591909", "1234"),
        ("6595146", "1234"),
        ("6600124", "1234"),
        ("6604217", "1234"),
        ("6605042", "1234"),
        ("6695529", "1234"),
        ("6698749", "1234"),
        ("6700524", "1234"),
        ("6710920", "1234"),
        ("6719387", "1234"),
        ("6724312", "1234"),
        ("6731416", "1234"),
        ("6731762", "1234"),
        ("6742461", "1234"),
        ("6743965", "1234"),
        ("6754047", "1234"),
        ("6756662", "1234"),
        ("6759982", "1234"),
        ("6775175", "1234"),
        ("6781892", "1234"),
        ("6784315", "1234"),
        ("6799246", "1234"),
        ("6804376", "1234"),
        ("6807619", "1234"),
        ("6809159", "1234"),
        ("6815122", "1234"),
        ("6819335", "1234"),
        ("6822830", "1234"),
        ("6825322", "1234"),
        ("6825909", "1234"),
        ("6833426", "1234"),
        ("6860783", "1234"),
        ("6861825", "1234"),
        ("6865646", "1234"),
        ("6867955", "1234"),
        ("6898868", "1234"),
        ("6910671", "1234"),
        ("6914364", "1234"),
        ("6932667", "1234"),
        ("6936271", "1234"),
        ("6941106", "1234"),
        ("6946318", "1234"),
        ("6946403", "1234"),
        ("6946404", "1234"),
        ("6954843", "1234"),
        ("6967228", "1234"),
        ("6972679", "1234"),
        ("6977730", "1234"),
        ("6986519", "1234"),
        ("6997177", "1234"),
        ("7001879", "1234"),
        ("7002532", "1234"),
        ("7007611", "1234"),
        ("7008443", "1234"),
        ("7018622", "1234"),
        ("7029606", "1234"),
        ("7035981", "1234"),
        ("7055561", "1234"),
        ("7076220", "1234"),
        ("7088175", "1234"),
        ("7089744", "1234"),
        ("7091777", "1234"),
        ("7105601", "1234"),
        ("7124998", "1234"),
        ("7125152", "1234"),
        ("7158957", "1234"),
        ("7170201", "1234"),
        ("7171618", "1234"),
        ("7177133", "1234"),
        ("7177222", "1234"),
        ("7180088", "1234"),
        ("7180761", "1234"),
        ("7201420", "1234"),
        ("7205219", "1234"),
        ("7225560", "1234"),
        ("7225651", "1234"),
        ("7234257", "1234"),
        ("7235032", "1234"),
        ("7244971", "1234"),
        ("7245474", "1234"),
        ("7249271", "1234"),
        ("7253395", "1234"),
        ("7254605", "1234"),
        ("7264035", "1234"),
        ("7268266", "1234"),
        ("7288524", "1234"),
        ("7294760", "1234"),
        ("7310118", "1234"),
        ("7310950", "1234"),
        ("7328265", "1234"),
        ("7332372", "1234"),
        ("7388362", "1234"),
        ("7393922", "1234"),
        ("7400125", "1234"),
        ("7408849", "1234"),
        ("7415386", "1234"),
        ("7428694", "1234"),
        ("7442386", "1234"),
        ("7457909", "1234"),
        ("7480379", "1234"),
        ("7480535", "1234"),
        ("7487944", "1234"),
        ("7488687", "1234"),
        ("7553585", "1234"),
        ("7586394", "1234"),
        ("7602374", "1234"),
        ("7602377", "1234"),
        ("7609895", "1234"),
        ("7611793", "1234"),
        ("7615656", "1234"),
        ("7910906", "1234"),
        ("7913095", "1234"),
        ("7915288", "1234"),
        ("7915635", "1234"),
        ("7921983", "1234"),
        ("7926957", "1234"),
        ("7928436", "1234"),
        ("7938332", "1234"),
        ("7944043", "1234"),
        ("7951350", "1234"),
        ("7951586", "1234"),
        ("7953745", "1234"),
        ("7970370", "1234"),
        ("7986663", "1234"),
        ("7988148", "1234"),
        ("7996131", "1234"),
        ("7996681", "1234"),
        ("7998661", "1234"),
        ("7998807", "1234"),
        ("8018833", "1234"),
        ("8020754", "1234"),
        ("8033610", "1234"),
        ("8048684", "1234"),
        ("8108551", "1234"),
        ("8166282", "1234"),
        ("8176572", "1234"),
        ("8184378", "1234"),
        ("8196858", "1234"),
        ("8221407", "1234"),
        ("8253646", "1234"),
        ("8262196", "1234"),
        ("8305837", "1234"),
        ("8354095", "1234"),
        ("8354755", "1234"),
        ("8386569", "1234"),
        ("8388510", "1234"),
        ("8399635", "1234"),
        ("8506522", "1234"),
        ("8537773", "1234"),
        ("8558828", "1234"),
        ("8674069", "1234"),
        ("8675838", "1234"),
        ("8690886", "1234"),
        ("8711805", "1234"),
        ("8725699", "1234"),
        ("8732142", "1234"),
        ("8775151", "1234"),
        ("8865375", "1234"),
        ("8903226", "1234"),
        ("8928583", "1234"),
        ("9002403", "1234"),
        ("9008473", "1234"),
        ("9019557", "1234"),
        ("9065676", "1234"),
        ("9093343", "1234"),
        ("9138707", "1234"),
        ("9291854", "1234"),
        ("9356025", "1234"),
        ("9357830", "1234"),
        ("9358094", "1234"),
        ("9374594", "1234"),
        ("9405257", "1234"),
        ("9492700", "1234"),
        ("9590155", "1234"),
        ("9596984", "1234"),
        ("9615873", "1234"),
        ("9635683", "1234"),
        ("9648039", "1234"),
        ("9689199", "1234"),
        ("9708661", "1234"),
        ("9732369", "1234"),
        ("9775527", "1234"),
        ("9784935", "1234"),
        ("9816016", "1234"),
        ("9836472", "1234"),
        ("9859305", "1234"),
        ("9872566", "1234"),
        ("9880893", "1234"),
        ("9901509", "1234"),
        ("9914383", "1234"),
        ("9930560", "1234"),
        ("9931992", "1234"),
        ("9934284", "1234"),
        ("9957866", "1234"),
        ("9963333", "1234"),
        ("9965747", "1234"),
        ("9966451", "1234"),
        ("9967579", "1234"),
        ("10005780", "1234"),
        ("10020620", "1234"),
        ("10076113", "1234"),
        ("10117239", "1234"),
        ("10129112", "1234"),
        ("10130711", "1234"),
        ("10147609", "1234"),
        ("10172090", "1234"),
        ("10174799", "1234"),
        ("10200148", "1234"),
        ("10200409", "1234"),
        ("10203564", "1234"),
        ("10235501", "1234"),
        ("10238934", "1234"),
        ("10240981", "1234"),
        ("10247295", "1234"),
        ("10272957", "1234"),
        ("10281941", "1234"),
        ("10282712", "1234"),
        ("10298084", "1234"),
        ("10310086", "1234"),
        ("10312038", "1234"),
        ("10363495", "1234"),
        ("10380580", "1234"),
        ("10411098", "1234"),
        ("10411826", "1234"),
        ("10415060", "1234"),
        ("10418867", "1234"),
        ("10433719", "1234"),
        ("10450420", "1234"),
        ("10467805", "1234"),
        ("10470349", "1234"),
        ("10470512", "1234"),
        ("10471499", "1234"),
        ("10482442", "1234"),
        ("10488225", "1234"),
        ("10491994", "1234"),
        ("10493091", "1234"),
        ("10504786", "1234"),
        ("10522964", "1234"),
        ("10525481", "1234"),
        ("10557052", "1234"),
        ("10574572", "1234"),
        ("10595493", "1234"),
        ("10614967", "1234"),
        ("10616207", "1234"),
        ("10696685", "1234"),
        ("10705272", "1234"),
        ("10712371", "1234"),
        ("10718660", "1234"),
        ("10718695", "1234"),
        ("10720774", "1234"),
        ("10720964", "1234"),
        ("10721714", "1234"),
        ("10740634", "1234"),
        ("10743437", "1234"),
        ("10754945", "1234"),
        ("10760329", "1234"),
        ("10762984", "1234"),
        ("10789556", "1234"),
        ("10806972", "1234"),
        ("10811952", "1234"),
        ("10813526", "1234"),
        ("10824020", "1234"),
        ("10850021", "1234"),
        ("10852667", "1234"),
        ("10854974", "1234"),
        ("10863957", "1234"),
        ("10867487", "1234"),
        ("10867518", "1234"),
        ("10869722", "1234"),
        ("10875686", "1234"),
        ("10882156", "1234"),
        ("10883228", "1234"),
        ("10887715", "1234"),
        ("10887976", "1234"),
        ("10888804", "1234"),
        ("10889318", "1234"),
        ("10890528", "1234"),
        ("10899243", "1234"),
        ("10900006", "1234"),
        ("10900062", "1234"),
        ("10908560", "1234"),
        ("10918621", "1234"),
        ("10918635", "1234"),
        ("10920419", "1234"),
        ("10930190", "1234"),
        ("10935530", "1234"),
        ("10936265", "1234"),
        ("10953569", "1234"),
        ("10957107", "1234"),
        ("10957115", "1234"),
        ("10961777", "1234"),
        ("10961819", "1234"),
        ("10962161", "1234"),
        ("10962165", "1234"),
        ("10962206", "1234"),
        ("10965571", "1234"),
        ("10969300", "1234"),
        ("10969993", "1234"),
        ("10976153", "1234"),
        ("10980398", "1234"),
        ("11000180", "1234"),
        ("11000199", "1234"),
        ("11000222", "1234"),
        ("11000238", "1234"),
        ("11001315", "1234"),
        ("11037145", "1234"),
        ("11189043", "1234"),
        ("11196882", "1234"),
        ("11263662", "1234"),
        ("11264654", "1234"),
        ("11274639", "1234"),
        ("11277378", "1234"),
        ("11289865", "1234"),
        ("11326261", "1234"),
        ("11334223", "1234"),
        ("11336989", "1234"),
        ("11342034", "1234"),
        ("11342164", "1234"),
        ("11342803", "1234"),
        ("11390229", "1234"),
        ("11399870", "1234"),
        ("11420395", "1234"),
        ("11437322", "1234"),
        ("11461090", "1234"),
        ("11467000", "1234"),
        ("11471932", "1234"),
        ("11480491", "1234"),
        ("11487239", "1234"),
        ("11523206", "1234"),
        ("11523300", "1234"),
        ("11551589", "1234"),
        ("11583264", "1234"),
        ("11626143", "1234"),
        ("11693297", "1234"),
        ("11727215", "1234"),
        ("11727222", "1234"),
        ("11727228", "1234"),
        ("11727851", "1234"),
        ("11948316", "1234"),
        ("12095930", "1234"),
        ("12194156", "1234"),
        ("12231355", "1234"),
        ("12308612", "1234"),
        ("12337182", "1234")
    ]

    #@task(1)
    def acliks1(self):
        user, pswd = random.choice(USER_CREDENTIALS)

        # 1. 로그인화면
        self.client.get("/login", name="1-1. 로그인화면")
        resp_login_idp = self.client.get("/login/idp", name="1-2. 로그인화면-IDP")

        # 2. 로그인처리
        tree = pq(resp_login_idp.content)
        test = tree("form[id='loginForm']")
        nonce = test("input[name='nonce']").val()
        client_id = test("input[name='client_id']").val()
        resp_idp_login = self.client.post(idp_url + "/auth/j_spring_security_check", name="2-1. 로그인-IDP", data={
            'redirect_uri': www_url + '/j_spring_security_check?client_id=' + client_id,
            'response_type': 'id_token',
            'client_id': client_id,
            'j_username': user,
            'j_password': pswd,
            'nonce': nonce
        })
        tree = pq(resp_idp_login.content)
        test = tree("form[name='form']")
        id_token = test("input[name='id_token']").val()
        nonce = test("input[name='nonce']").val()

        resp_login = self.client.post("/j_spring_security_check?client_id=" + client_id, name="2-2. 로그인-WWW", data={
            'id_token': id_token,
            'nonce': nonce
        })
        tree = pq(resp_login.content)
        test = tree("form[id='scanPayGoCheckoutForm']")
        csrf = test("input[name='CSRFToken']").val()

        # 3. 제품상세
        self.client.get("/easy-gift/p/E6833A", name="3-1. 제품상세 화면")
        self.client.get("/message-center/ajax/unread-count", name="3-2. 맞춤메시지")
        self.client.post("/cart/miniCart/ajax/total", name="3-3. 장바구니갯수", data={
            'CSRFToken': csrf
        })
        #self.client.get("/view/PersonalizedProductRecommendationComponentController/ajax/contents/ProductPersonalizedProductRecommendationComponent?recommendProducts=120524V&recommendProducts=117642V&recommendProducts=117644A&recommendProducts=117659V&recommendProducts=120872D&recommendProducts=111225V&recommendProducts=123861V&recommendProducts=117652V&recommendProducts=117647V&recommendProducts=119619V&recommendProducts=116694D&recommendProducts=123860V&recommendProducts=113806V&recommendProducts=123859V&recommendProducts=123858V&recommendProducts=118104K&recommendProducts=113808V&recommendProducts=120549D&recommendProducts=118102K&recommendProducts=113801V", name="3-10. 이런상품어때요")

        # 4. A Cliks공유
        self.client.post("/share/ajax/RECOMMENDATION/ready/PDP", name="4-1. A Cliks공유", data={
            'cartEntries[0].productCode': 'E6833A', 'cartEntries[0].selected': 'true', 'cartEntries[0].quantity': '1', 'cartEntries[0].entryNumber': '0',
            'CSRFToken': csrf
        })
        self.client.post("/share/ajax/create/PDP", name="4-2. 공유대상 선택", data={
            'cartEntries[0].productCode': 'E6833A', 'cartEntries[0].selected': 'true', 'cartEntries[0].quantity': '1', 'cartEntries[0].entryNumber': '0',
             'messageType': 'RECOMMENDATION', 'CSRFToken': csrf
        })

        # 5. 로그아웃
        self.client.get("/logout", name="5. 로그아웃")

    #@task
    def acliks2(self):
        user, pswd = random.choice(USER_CREDENTIALS)

        #1. 로그인화면
        self.client.get("/login", name="1-1. 로그인화면")
        resp_login_idp = self.client.get("/login/idp", name="1-2. 로그인화면-IDP")

        #2. 로그인처리
        tree = pq(resp_login_idp.content)
        test = tree("form[id='loginForm']")
        nonce = test("input[name='nonce']").val()
        client_id = test("input[name='client_id']").val()
        resp_idp_login = self.client.post(idp_url + "/auth/j_spring_security_check", name="2-1. 로그인-IDP", data={
            'redirect_uri': www_url + '/j_spring_security_check?client_id=' + client_id,
            'response_type': 'id_token',
            'client_id': client_id,
            'j_username': user,
            'j_password': pswd,
            'nonce': nonce
        })
        tree = pq(resp_idp_login.content)
        test = tree("form[name='form']")
        id_token = test("input[name='id_token']").val()
        nonce = test("input[name='nonce']").val()

        resp_login = self.client.post("/j_spring_security_check?client_id=" + client_id, name="2-2. 로그인-WWW", data={
            'id_token': id_token,
            'nonce': nonce
        })
        tree = pq(resp_login.content)
        test = tree("form[id='scanPayGoCheckoutForm']")
        csrf = test("input[name='CSRFToken']").val()

        # 3. A Cliks 랜딩화면
        self.client.get("/share?slid=ODgwMjIyMDY5NTAxOQ%3D%3D", name="3-1. A Cliks 랜딩화면")
        self.client.get("/share/checkNetfunnel", name="3-2. A Cliks 랜딩화면2")
        self.client.get("/share?rebuild=false", name="3-3. A Cliks 랜딩화면3")
        self.client.post("/share/cart/ajax/content", name="3-4. A Cliks 랜딩화면4", data={
            'CSRFToken': csrf
         })

        # 4. A Cliks 주문
        self.client.get("/account/ajax/is-resigned", name="4-1. A Cliks 주문1")
        self.client.get("/share/checkout/forward", name="4-2. A Cliks 주문2")
        self.client.get("/checkout/general", name="4-3. A Cliks 주문3")
        resp_contents = self.client.post("/checkout/delivery-mode/delivery/ajax/contents", name="4-4. A Cliks 주문4", data={
            'CSRFToken': csrf
        })
        tree = pq(resp_contents.content)
        test = tree("div[class='shipping-address']")
        deliveryAddressId = test("input[name='deliveryAddressId']").val()
        self.client.post("/checkout/ajax/setDeliveryAddress", name="4-5. A Cliks 주문5", data={
            'deliveryAddressIds[0]': deliveryAddressId,
            'deliveryMessages[0]': '',
            'CSRFToken': csrf
        })
        self.client.post("/checkout/ajax/setPaymentMode", name="4-6. A Cliks 주문6", data={
            'paymentMode': 'deposit',
            'CSRFToken': csrf
        })
        self.client.post("/checkout/ajax/validateCartData", name="4-7. A Cliks 주문7", data={
            'step': 'PLACEORDER',
            'CSRFToken': csrf
        })
        self.client.post("/checkout/payment-mode/deposit/ajax/contents", name="4-8. A Cliks 주문8", data={
            'CSRFToken': csrf
        })
        self.client.post("/checkout/ajax/getCartContents", name="4-9. A Cliks 주문9", data={
            'CSRFToken': csrf
        })

        # 5. 로그아웃
        self.client.get("/logout", name="5. 로그아웃")

    #@task(1)
    def jangso1(self):
        user, pswd = random.choice(USER_CREDENTIALS)

        # 1. 로그인화면
        self.client.get("/login", name="1-1. 로그인화면")
        resp_login_idp = self.client.get("/login/idp", name="1-2. 로그인화면-IDP")

        # 2. 로그인처리
        tree = pq(resp_login_idp.content)
        test = tree("form[id='loginForm']")
        nonce = test("input[name='nonce']").val()
        client_id = test("input[name='client_id']").val()
        resp_idp_login = self.client.post(idp_url + "/auth/j_spring_security_check", name="2-1. 로그인-IDP", data={
            'redirect_uri': www_url + '/j_spring_security_check?client_id=' + client_id,
            'response_type': 'id_token',
            'client_id': client_id,
            'j_username': user,
            'j_password': pswd,
            'nonce': nonce
        })
        tree = pq(resp_idp_login.content)
        test = tree("form[name='form']")
        id_token = test("input[name='id_token']").val()
        nonce = test("input[name='nonce']").val()

        resp_login = self.client.post("/j_spring_security_check?client_id=" + client_id, name="2-2. 로그인-WWW", data={
            'id_token': id_token,
            'nonce': nonce
        })
        tree = pq(resp_login.content)
        test = tree("form[id='scanPayGoCheckoutForm']")
        csrf = test("input[name='CSRFToken']").val()

        # 3. 장스오 화면
        self.client.get("/smart-order/pack", name="3-1. 장스오 화면")
        self.client.get("/message-center/ajax/unread-count", name="3-2. 맞춤메시지")
        self.client.post("/cart/miniCart/ajax/total", name="3-3. 장바구니갯수", data={
            'CSRFToken': csrf
        })

        # 4. 카트담기
        self.client.post("/cart/ajax/confirmAddGrid", name="4-1. 장바구니추가", data={
            'cartEntries[0].productCode': '282659K', 'cartEntries[0].selected': 'true', 'cartEntries[0].quantity': '1',
            'cartEntries[1].productCode': '109849K', 'cartEntries[1].selected': 'true', 'cartEntries[1].quantity': '1',
            'cartEntries[2].productCode': '110403K', 'cartEntries[2].selected': 'true', 'cartEntries[2].quantity': '1',
            'cartEntries[3].productCode': '110481K', 'cartEntries[3].selected': 'true', 'cartEntries[3].quantity': '1',
            'cartEntries[4].productCode': '287470K', 'cartEntries[4].selected': 'true', 'cartEntries[4].quantity': '1',
            'cartEntries[5].productCode': '118102K', 'cartEntries[5].selected': 'true', 'cartEntries[5].quantity': '1',
            'cartEntries[6].productCode': '110656K', 'cartEntries[6].selected': 'true', 'cartEntries[6].quantity': '1',
            'cartEntries[7].productCode': '118107A', 'cartEntries[7].selected': 'true', 'cartEntries[7].quantity': '1',
            'cartEntries[8].productCode': '110665K', 'cartEntries[8].selected': 'true', 'cartEntries[8].quantity': '1',
            'cartEntries[9].productCode': '118112A', 'cartEntries[9].selected': 'true', 'cartEntries[9].quantity': '1',
            'cartEntries[10].productCode': 'E6833A', 'cartEntries[10].selected': 'true',
            'cartEntries[10].quantity': '1',
            'CSRFToken': csrf
        })
        self.client.post("/cart/ajax/addGrid", name="4-2. 장바구니추가", data={
            'cartEntries[0].productCode': '282659K', 'cartEntries[0].selected': 'true', 'cartEntries[0].quantity': '1',
            'cartEntries[1].productCode': '109849K', 'cartEntries[1].selected': 'true', 'cartEntries[1].quantity': '1',
            'cartEntries[2].productCode': '110403K', 'cartEntries[2].selected': 'true', 'cartEntries[2].quantity': '1',
            'cartEntries[3].productCode': '110481K', 'cartEntries[3].selected': 'true', 'cartEntries[3].quantity': '1',
            'cartEntries[4].productCode': '287470K', 'cartEntries[4].selected': 'true', 'cartEntries[4].quantity': '1',
            'cartEntries[5].productCode': '118102K', 'cartEntries[5].selected': 'true', 'cartEntries[5].quantity': '1',
            'cartEntries[6].productCode': '110656K', 'cartEntries[6].selected': 'true', 'cartEntries[6].quantity': '1',
            'cartEntries[7].productCode': '118107A', 'cartEntries[7].selected': 'true', 'cartEntries[7].quantity': '1',
            'cartEntries[8].productCode': '110665K', 'cartEntries[8].selected': 'true', 'cartEntries[8].quantity': '1',
            'cartEntries[9].productCode': '118112A', 'cartEntries[9].selected': 'true', 'cartEntries[9].quantity': '1',
            'cartEntries[10].productCode': 'E6833A', 'cartEntries[10].selected': 'true',
            'cartEntries[10].quantity': '1',
            'CSRFToken': csrf
        })
        self.client.post("/cart/miniCart/ajax/total", name="4-3. 장바구니갯수", data={
            'CSRFToken': csrf
        })
        self.client.get("/cart", name="4-4. 장바구니화면")
        self.client.post("/cart/ajax/content", name="4-5. 장바구니화면", data={
            'sortBy': '',
            'productCodes': '',
            'CSRFToken': csrf
        })
        self.client.post("/cart/ajax/updateSummaryTotal", name="4-6. 장바구니화면", data={
            'productCodes': '',
            'CSRFToken': csrf
        })

        # 5. 스마트오더공유
        self.client.post("/share/ajax/ready/CART", name="5-1. A Cliks", data={
            'cartEntries[0].productCode': '282659K', 'cartEntries[0].selected': 'true', 'cartEntries[0].quantity': '1',
            'cartEntries[0].entryNumber': '0',
            'cartEntries[1].productCode': '109849K', 'cartEntries[1].selected': 'true', 'cartEntries[1].quantity': '1',
            'cartEntries[1].entryNumber': '1',
            'cartEntries[2].productCode': '110403K', 'cartEntries[2].selected': 'true', 'cartEntries[2].quantity': '1',
            'cartEntries[2].entryNumber': '2',
            'cartEntries[3].productCode': '110481K', 'cartEntries[3].selected': 'true', 'cartEntries[3].quantity': '1',
            'cartEntries[3].entryNumber': '3',
            'cartEntries[4].productCode': '287470K', 'cartEntries[4].selected': 'true', 'cartEntries[4].quantity': '1',
            'cartEntries[4].entryNumber': '4',
            'cartEntries[5].productCode': '118102K', 'cartEntries[5].selected': 'true', 'cartEntries[5].quantity': '1',
            'cartEntries[5].entryNumber': '5',
            'cartEntries[6].productCode': '110656K', 'cartEntries[6].selected': 'true', 'cartEntries[6].quantity': '1',
            'cartEntries[6].entryNumber': '6',
            'cartEntries[7].productCode': '118107A', 'cartEntries[7].selected': 'true', 'cartEntries[7].quantity': '1',
            'cartEntries[7].entryNumber': '7',
            'cartEntries[8].productCode': '110665K', 'cartEntries[8].selected': 'true', 'cartEntries[8].quantity': '1',
            'cartEntries[8].entryNumber': '8',
            'cartEntries[9].productCode': '118112A', 'cartEntries[9].selected': 'true', 'cartEntries[9].quantity': '1',
            'cartEntries[9].entryNumber': '9',
            'cartEntries[10].productCode': 'E6833A', 'cartEntries[10].selected': 'true',
            'cartEntries[10].quantity': '1', 'cartEntries[10].entryNumber': '10',
            'CSRFToken': csrf
        })
        self.client.post("/share/ajax/SMART_ORDER/ready/CART", name="5-2. 스마트오더 선택", data={
            'cartEntries[0].productCode': '282659K', 'cartEntries[0].selected': 'true', 'cartEntries[0].quantity': '1',
            'cartEntries[0].entryNumber': '0',
            'cartEntries[1].productCode': '109849K', 'cartEntries[1].selected': 'true', 'cartEntries[1].quantity': '1',
            'cartEntries[1].entryNumber': '1',
            'cartEntries[2].productCode': '110403K', 'cartEntries[2].selected': 'true', 'cartEntries[2].quantity': '1',
            'cartEntries[2].entryNumber': '2',
            'cartEntries[3].productCode': '110481K', 'cartEntries[3].selected': 'true', 'cartEntries[3].quantity': '1',
            'cartEntries[3].entryNumber': '3',
            'cartEntries[4].productCode': '287470K', 'cartEntries[4].selected': 'true', 'cartEntries[4].quantity': '1',
            'cartEntries[4].entryNumber': '4',
            'cartEntries[5].productCode': '118102K', 'cartEntries[5].selected': 'true', 'cartEntries[5].quantity': '1',
            'cartEntries[5].entryNumber': '5',
            'cartEntries[6].productCode': '110656K', 'cartEntries[6].selected': 'true', 'cartEntries[6].quantity': '1',
            'cartEntries[6].entryNumber': '6',
            'cartEntries[7].productCode': '118107A', 'cartEntries[7].selected': 'true', 'cartEntries[7].quantity': '1',
            'cartEntries[7].entryNumber': '7',
            'cartEntries[8].productCode': '110665K', 'cartEntries[8].selected': 'true', 'cartEntries[8].quantity': '1',
            'cartEntries[8].entryNumber': '8',
            'cartEntries[9].productCode': '118112A', 'cartEntries[9].selected': 'true', 'cartEntries[9].quantity': '1',
            'cartEntries[9].entryNumber': '9',
            'cartEntries[10].productCode': 'E6833A', 'cartEntries[10].selected': 'true',
            'cartEntries[10].quantity': '1', 'cartEntries[10].entryNumber': '10',
            'CSRFToken': csrf
        })
        resp_create = self.client.post("/share/ajax/create/CART", name="5-3. 스마트오더 공유대상 선택", data={
            'cartEntries[0].productCode': '282659K', 'cartEntries[0].selected': 'true', 'cartEntries[0].quantity': '1',
            'cartEntries[0].entryNumber': '0',
            'cartEntries[1].productCode': '109849K', 'cartEntries[1].selected': 'true', 'cartEntries[1].quantity': '1',
            'cartEntries[1].entryNumber': '1',
            'cartEntries[2].productCode': '110403K', 'cartEntries[2].selected': 'true', 'cartEntries[2].quantity': '1',
            'cartEntries[2].entryNumber': '2',
            'cartEntries[3].productCode': '110481K', 'cartEntries[3].selected': 'true', 'cartEntries[3].quantity': '1',
            'cartEntries[3].entryNumber': '3',
            'cartEntries[4].productCode': '287470K', 'cartEntries[4].selected': 'true', 'cartEntries[4].quantity': '1',
            'cartEntries[4].entryNumber': '4',
            'cartEntries[5].productCode': '118102K', 'cartEntries[5].selected': 'true', 'cartEntries[5].quantity': '1',
            'cartEntries[5].entryNumber': '5',
            'cartEntries[6].productCode': '110656K', 'cartEntries[6].selected': 'true', 'cartEntries[6].quantity': '1',
            'cartEntries[6].entryNumber': '6',
            'cartEntries[7].productCode': '118107A', 'cartEntries[7].selected': 'true', 'cartEntries[7].quantity': '1',
            'cartEntries[7].entryNumber': '7',
            'cartEntries[8].productCode': '110665K', 'cartEntries[8].selected': 'true', 'cartEntries[8].quantity': '1',
            'cartEntries[8].entryNumber': '8',
            'cartEntries[9].productCode': '118112A', 'cartEntries[9].selected': 'true', 'cartEntries[9].quantity': '1',
            'cartEntries[9].entryNumber': '9',
            'cartEntries[10].productCode': 'E6833A', 'cartEntries[10].selected': 'true',
            'cartEntries[10].quantity': '1', 'cartEntries[10].entryNumber': '10',
            'messageType': 'SMART_ORDER',
            'description': '',
            'CSRFToken': csrf
        })
        # resp_create_json = json.loads(resp_create.text)
        # print(resp_create_json['shareUrl'])

        # 6. 로그아웃
        #self.client.get("/logout", name="6. 로그아웃")

    #@task(3)
    def jangso2(self):
        user, pswd = random.choice(USER_CREDENTIALS)

        #1. 로그인화면
        self.client.get("/login", name="1-1. 로그인화면")
        resp_login_idp = self.client.get("/login/idp", name="1-2. 로그인화면-IDP")

        #2. 로그인처리
        tree = pq(resp_login_idp.content)
        test = tree("form[id='loginForm']")
        nonce = test("input[name='nonce']").val()
        client_id = test("input[name='client_id']").val()
        resp_idp_login = self.client.post(idp_url + "/auth/j_spring_security_check", name="2-1. 로그인-IDP", data={
            'redirect_uri': www_url + '/j_spring_security_check?client_id=' + client_id,
            'response_type': 'id_token',
            'client_id': client_id,
            'j_username': user,
            'j_password': pswd,
            'nonce': nonce
        })
        tree = pq(resp_idp_login.content)
        test = tree("form[name='form']")
        id_token = test("input[name='id_token']").val()
        nonce = test("input[name='nonce']").val()

        resp_login = self.client.post("/j_spring_security_check?client_id=" + client_id, name="2-2. 로그인-WWW", data={
            'id_token': id_token,
            'nonce': nonce
        })
        tree = pq(resp_login.content)
        test = tree("form[id='scanPayGoCheckoutForm']")
        csrf = test("input[name='CSRFToken']").val()

        # 7. 스마트오더 랜딩화면
        #self.client.get(resp_create_json['shareUrl'], name="7-1. 스마트오더 랜딩화면1")
        self.client.get("https://wj6s6.app.goo.gl/jTKTJ3", name="7-1. 스마트오더 랜딩화면1")
        self.client.post("/share/cart/ajax/content", name="7-2. 스마트오더 랜딩화면2", data={
            'CSRFToken': csrf
         })

        # 8. 정기배송 신청
        self.client.get("/account/ajax/is-resigned", name="8-1. 정기배송 신청1")
        self.client.get("/share/checkout/forward", name="8-2. 정기배송 신청2")
        self.client.get("/smart-order/ajax/profile-cart", name="8-3. 정기배송 신청3")
        self.client.get("/my-account/address-book/ajax/list", name="8-4. 정기배송 신청4")

        # 7. 스마트오더 랜딩화면
        #self.client.get(resp_create_json['shareUrl'], name="7-1. 스마트오더 랜딩화면1")
        self.client.get("https://wj6s6.app.goo.gl/jTKTJ3", name="7-1. 스마트오더 랜딩화면1")
        self.client.post("/share/cart/ajax/content", name="7-2. 스마트오더 랜딩화면2", data={
            'CSRFToken': csrf
         })

        # 8. 정기배송 신청
        self.client.get("/account/ajax/is-resigned", name="8-1. 정기배송 신청1")
        self.client.get("/share/checkout/forward", name="8-2. 정기배송 신청2")
        self.client.get("/smart-order/ajax/profile-cart", name="8-3. 정기배송 신청3")
        self.client.get("/my-account/address-book/ajax/list", name="8-4. 정기배송 신청4")

        # 6. 로그아웃
        self.client.get("/logout", name="6. 로그아웃")

    #@task(1)
    def jangso3(self):
        # 7. 스마트오더 랜딩화면
        # self.client.get(resp_create_json['shareUrl'], name="7-1. 스마트오더 랜딩화면1")
        self.client.get("https://wj6s6.app.goo.gl/jTKTJ3", name="1-1. 스마트오더 랜딩화면1")

    @task
    def login_main(self):
        user, pswd = random.choice(USER_CREDENTIALS)
        #user_bytes = user.encode('ascii')
        #base64_bytes = base64.b64encode(user_bytes)
        #base64_user = base64_bytes.decode('ascii')

        # 1.메인화면
        self.client.get("/main", name="1-1. 메인화면")
        self.client.get("/view/MagazineComponentController/contents?componentUid=HomeMagazineComponent",
                        name="1-2. 매거진")
        self.client.get(
            "/view/DiscoveryProductRecommendationComponentController/ajax/filldata/ProductRecommendationTypeAComponent",
            name="1-3. 추천상품-A")
        # self.client.get("/view/DiscoveryProductRecommendationComponentController/ajax/filldata/comp_00230000", name="1-3. 추천상품-00230000")

        # 2. 로그인화면
        self.client.get("/login", name="2-1. 로그인화면")
        resp_login_idp = self.client.get("/login/idp", name="2-2. 로그인화면-IDP")

        # 3. 로그인처리
        tree = pq(resp_login_idp.content)
        test = tree("form[id='loginForm']")
        nonce = test("input[name='nonce']").val()
        client_id = test("input[name='client_id']").val()
        resp_idp_login = self.client.post(idp_url + "/auth/j_spring_security_check", name="3-1. 로그인-IDP", data={
            'redirect_uri': www_url + '/j_spring_security_check?client_id=' + str(client_id),
            'response_type': 'id_token',
            'client_id': client_id,
            'j_username': user,
            'j_password': pswd,
            'nonce': nonce
        })
        tree = pq(resp_idp_login.content)
        test = tree("form[name='form']")
        id_token = test("input[name='id_token']").val()
        nonce = test("input[name='nonce']").val()

        resp_login = self.client.post("/j_spring_security_check?client_id=" + str(client_id), name="3-2. 로그인-WWW", data={
            'id_token': id_token,
            'nonce': nonce
        })
        tree = pq(resp_login.content)
        test = tree("form[id='scanPayGoCheckoutForm']")
        csrf = test("input[name='CSRFToken']").val()

        self.client.get("/main", name="3-3. 메인화면")
        self.client.get("/message-center/ajax/unread-count", name="3-4. 맞춤메시지")
        self.client.post("/cart/miniCart/ajax/total", name="3-5. 장바구니갯수", data={
            'CSRFToken': csrf
        })

        #self.client.get("/login/ajax/update/customer?customerId=" + str(base64_user), name="3-6. 로그인-회원정보동기화")
        self.client.get("/view/MagazineComponentController/contents?componentUid=HomeMagazineComponent", name="3-7. 매거진")
        self.client.get("/view/DiscoveryProductRecommendationComponentController/ajax/filldata/ProductRecommendationTypeAComponent", name="3-8. 추천상품-A")

        # 4. 로그아웃
        self.client.cookies.clear();
        #self.client.get("/logout", name="4. 로그아웃")

    #@task
    def login_promotion(self):
        #user, pswd = random.choice(USER_CREDENTIALS)
        user, pswd = ("7480001", "1234")

        # 1.메인화면
        self.client.get("/main", name="1-1. 메인화면")
        self.client.get("/view/MagazineComponentController/contents?componentUid=HomeMagazineComponent", name="1-2. 매거진")
        self.client.get("/view/DiscoveryProductRecommendationComponentController/ajax/filldata/ProductRecommendationTypeAComponent", name="1-3. 추천상품-A")
        #self.client.get("/view/DiscoveryProductRecommendationComponentController/ajax/filldata/comp_00230000", name="1-3. 추천상품-00230000")

        # 2. 로그인화면
        self.client.get("/login", name="2-1. 로그인화면")
        resp_login_idp = self.client.get("/login/idp", name="2-2. 로그인화면-IDP")

        # 3. 로그인처리
        tree = pq(resp_login_idp.content)
        test = tree("form[id='loginForm']")
        nonce = test("input[name='nonce']").val()
        client_id = test("input[name='client_id']").val()
        resp_idp_login = self.client.post(idp_url + "/auth/j_spring_security_check", name="3-1. 로그인-IDP", data={
            'redirect_uri': www_url + '/j_spring_security_check?client_id=' + client_id,
            'response_type': 'id_token',
            'client_id': client_id,
            'j_username': user,
            'j_password': pswd,
            'nonce': nonce
        })
        tree = pq(resp_idp_login.content)
        test = tree("form[name='form']")
        id_token = test("input[name='id_token']").val()
        nonce = test("input[name='nonce']").val()

        resp_login = self.client.post("/j_spring_security_check?client_id=" + client_id, name="3-2. 로그인-WWW", data={
            'id_token': id_token,
            'nonce': nonce
        })
        tree = pq(resp_login.content)
        test = tree("form[id='scanPayGoCheckoutForm']")
        csrf = test("input[name='CSRFToken']").val()

        self.client.get("/main", name="3-3. 메인화면")
        self.client.get("/message-center/ajax/unread-count", name="3-4. 맞춤메시지")
        self.client.post("/cart/miniCart/ajax/total", name="3-5. 장바구니갯수", data={
            'CSRFToken': csrf
        })
        self.client.get("/login/ajax/update/customer?customerId=NzQ4MDAwMQ==", name="3-6. 로그인-회원정보동기화")
        self.client.get("/view/MagazineComponentController/contents?componentUid=HomeMagazineComponent", name="3-7. 매거진")
        self.client.get("/view/DiscoveryProductRecommendationComponentController/ajax/filldata/ProductRecommendationTypeAComponent", name="3-8. 추천상품-A")
        #self.client.get("/view/DiscoveryProductRecommendationComponentController/ajax/filldata/comp_00230000", name="3-8. 추천상품-00230000")

        #4. 프로모션상세 화면
        self.client.get("/notifications/promotion/detail?notificationCode=00002368&noticeType=PROMOTION&searchPromotionStatus=progress&page=0", name="4-1. 프로모션상세 화면")
        self.client.get("/message-center/ajax/unread-count", name="4-2. 맞춤메시지")
        self.client.post("/cart/miniCart/ajax/total", name="4-3. 장바구니갯수", data={
            'CSRFToken': csrf
        })

        # 5. 로그아웃
        self.client.get("/logout", name="5. 로그아웃")

    #@task
    def gift_mall_order(self):
        # 1.메인화면
        user, pswd = ("7480001", "1234")
        # user, pswd = random.choice(USER_CREDENTIALS)
        user_bytes = user.encode('ascii')
        base64_bytes = base64.b64encode(user_bytes)
        base64_user = base64_bytes.decode('ascii')

        # 1.메인화면
        self.client.get("/main", name="1-1. 메인화면")
        self.client.get("/view/MagazineComponentController/contents?componentUid=HomeMagazineComponent",
                        name="1-2. 매거진")
        self.client.get(
            "/view/DiscoveryProductRecommendationComponentController/ajax/filldata/ProductRecommendationTypeAComponent",
            name="1-3. 추천상품-A")
        # self.client.get("/view/DiscoveryProductRecommendationComponentController/ajax/filldata/comp_00230000", name="1-3. 추천상품-00230000")

        # 2. 로그인화면
        self.client.get("/login", name="2-1. 로그인화면")
        resp_login_idp = self.client.get("/login/idp", name="2-2. 로그인화면-IDP")

        # 3. 로그인처리
        tree = pq(resp_login_idp.content)
        test = tree("form[id='loginForm']")
        nonce = test("input[name='nonce']").val()
        client_id = test("input[name='client_id']").val()
        resp_idp_login = self.client.post(idp_url + "/auth/j_spring_security_check", name="3-1. 로그인-IDP", data={
            'redirect_uri': www_url + '/j_spring_security_check?client_id=' + client_id,
            'response_type': 'id_token',
            'client_id': client_id,
            'j_username': user,
            'j_password': pswd,
            'nonce': nonce
        })
        tree = pq(resp_idp_login.content)
        test = tree("form[name='form']")
        id_token = test("input[name='id_token']").val()
        nonce = test("input[name='nonce']").val()

        resp_login = self.client.post("/j_spring_security_check?client_id=" + client_id, name="3-2. 로그인-WWW", data={
            'id_token': id_token,
            'nonce': nonce
        })
        tree = pq(resp_login.content)
        test = tree("form[id='scanPayGoCheckoutForm']")
        csrf = test("input[name='CSRFToken']").val()

        self.client.get("/main", name="3-3. 메인화면")
        self.client.get("/message-center/ajax/unread-count", name="3-4. 맞춤메시지")
        self.client.post("/cart/miniCart/ajax/total", name="3-5. 장바구니갯수", data={
            'CSRFToken': csrf
        })

        self.client.get("/login/ajax/update/customer?customerId=" + str(base64_user), name="3-6. 로그인-회원정보동기화")
        self.client.get("/view/MagazineComponentController/contents?componentUid=HomeMagazineComponent",
                        name="3-7. 매거진")
        self.client.get(
            "/view/DiscoveryProductRecommendationComponentController/ajax/filldata/ProductRecommendationTypeAComponent",
            name="3-8. 추천상품-A")

        # 4. 선물몰
        self.client.get("/main", name="4-1. 선물몰 메인화면")
        self.client.get("/message-center/ajax/unread-count", name="4-2. 맞춤메시지")
        self.client.post("/cart/miniCart/ajax/total", name="4-3. 장바구니갯수", data={
            'CSRFToken': csrf
        })

        # 5. 주문/결제
        self.client.post("/checkout/gift/ajax/createcart", name="5-1. 주문/결제", data={
            'CSRFToken': csrf,
            'productCodes[0]': 'E6833A',
            'qties[0]': '1'
        })
        self.client.post("/checkout/gift", name="5-2. 주문/결제", data={
            'CSRFToken': csrf,
            'productCodes[0]': 'E6833A',
            'qties[0]': '1'
        })
        self.client.post("/checkout/gift/delivery-mode/delivery/ajax/contents", name="5-3. 주문/결제", data={
            'CSRFToken': csrf
        })
        # 6. 로그아웃
        self.client.get("/logout", name="6. 로그아웃")

    #@task
    def general_order(self):
        # 1.메인화면
        #user, pswd = ("7480001", "1234")
        user, pswd = random.choice(USER_CREDENTIALS)
        user_bytes = user.encode('ascii')
        base64_bytes = base64.b64encode(user_bytes)
        base64_user = base64_bytes.decode('ascii')

        # 1.메인화면
        self.client.get("/main", name="1-1. 메인화면")
        self.client.get("/view/MagazineComponentController/contents?componentUid=HomeMagazineComponent",
                        name="1-2. 매거진")
        self.client.get(
            "/view/DiscoveryProductRecommendationComponentController/ajax/filldata/ProductRecommendationTypeAComponent",
            name="1-3. 추천상품-A")
        # self.client.get("/view/DiscoveryProductRecommendationComponentController/ajax/filldata/comp_00230000", name="1-3. 추천상품-00230000")

        # 2. 로그인화면
        self.client.get("/login", name="2-1. 로그인화면")
        resp_login_idp = self.client.get("/login/idp", name="2-2. 로그인화면-IDP")

        # 3. 로그인처리
        tree = pq(resp_login_idp.content)
        test = tree("form[id='loginForm']")
        nonce = test("input[name='nonce']").val()
        client_id = test("input[name='client_id']").val()
        resp_idp_login = self.client.post(idp_url + "/auth/j_spring_security_check", name="3-1. 로그인-IDP", data={
            'redirect_uri': www_url + '/j_spring_security_check?client_id=' + client_id,
            'response_type': 'id_token',
            'client_id': client_id,
            'j_username': user,
            'j_password': pswd,
            'nonce': nonce
        })
        tree = pq(resp_idp_login.content)
        test = tree("form[name='form']")
        id_token = test("input[name='id_token']").val()
        nonce = test("input[name='nonce']").val()

        resp_login = self.client.post("/j_spring_security_check?client_id=" + client_id, name="3-2. 로그인-WWW", data={
            'id_token': id_token,
            'nonce': nonce
        })
        tree = pq(resp_login.content)
        test = tree("form[id='scanPayGoCheckoutForm']")
        csrf = test("input[name='CSRFToken']").val()

        self.client.get("/main", name="3-3. 메인화면")
        self.client.get("/message-center/ajax/unread-count", name="3-4. 맞춤메시지")
        self.client.post("/cart/miniCart/ajax/total", name="3-5. 장바구니갯수", data={
            'CSRFToken': csrf
        })

        self.client.get("/login/ajax/update/customer?customerId=" + str(base64_user), name="3-6. 로그인-회원정보동기화")
        self.client.get("/view/MagazineComponentController/contents?componentUid=HomeMagazineComponent", name="3-7. 매거진")
        self.client.get("/view/DiscoveryProductRecommendationComponentController/ajax/filldata/ProductRecommendationTypeAComponent", name="3-8. 추천상품-A")

        #4. 카트-제품상세 화면
        self.client.post("/cart/ajax/confirmAddGrid", name="4-1. 장바구니추가", data={
            'cartEntries[0].productCode': 'E6833A',
            'cartEntries[0].selected': 'true',
            'cartEntries[0].quantity': '1',
            'CSRFToken': csrf
         })
        self.client.post("/cart/ajax/addGrid", name="4-2. 장바구니추가", data={
            'cartEntries[0].productCode': 'E6833A',
            'cartEntries[0].selected': 'true',
            'cartEntries[0].quantity': '1',
            'CSRFToken': csrf
         })
        self.client.post("/cart/miniCart/ajax/total", name="4-3. 장바구니갯수", data={
            'CSRFToken': csrf
         })
        self.client.get("/cart", name="4-4. 장바구니화면")
        self.client.post("/cart/ajax/content", name="4-5. 장바구니화면", data={
            'sortBy': '',
            'productCodes': '',
            'CSRFToken': csrf
         })
        self.client.post("/cart/ajax/updateSummaryTotal", name="4-6. 장바구니화면", data={
            'productCodes': '',
            'CSRFToken': csrf
         })
        self.client.get("/easy-gift/p/E6833A", name="4-7. 제품상세화면")
        self.client.get("/message-center/ajax/unread-count", name="4-8. 맞춤메시지")
        self.client.post("/cart/miniCart/ajax/total", name="4-9. 장바구니갯수", data={
            'CSRFToken': csrf
        })
        self.client.get("/view/PersonalizedProductRecommendationComponentController/ajax/contents/ProductPersonalizedProductRecommendationComponent?recommendProducts=231647K&recommendProducts=100957K&recommendProducts=120522A&recommendProducts=120351K&recommendProducts=E9949K", name="4-10. 이런상품어때요")

        #5. 바로구매
        self.client.post("/checkout/general/ajax/createcart", name="5-1. 바로구매", data={
            'qties': '1',
            'productCodes': 'E6833A',
            'CSRFToken': csrf
         })
        self.client.post("/checkout/general", name="5-2. 바로구매", data={
            'qties': '1',
            'productCodes': 'E6833A',
            'CSRFToken': csrf
         })

        #6. 배달주문 선택
        resp_contents = self.client.post("/checkout/delivery-mode/delivery/ajax/contents", name="6. 배달주문", data={
            'CSRFToken': csrf
        })
        tree = pq(resp_contents.content)
        test = tree("div[class='shipping-address']")
        deliveryAddressId = test("input[name='deliveryAddressId']").val()


        #7. 무통장입금 선택
        self.client.post("/checkout/ajax/setDeliveryAddress", name="7-1. 무통장입금", data={
            'deliveryAddressIds[0]': deliveryAddressId,
            'deliveryMessages[0]': '',
            'CSRFToken': csrf
        })
        self.client.post("/checkout/ajax/setPaymentMode", name="7-2. 무통장입금", data={
            'paymentMode': 'deposit',
            'CSRFToken': csrf
        })
        self.client.post("/checkout/ajax/validateCartData", name="7-3. 무통장입금", data={
            'step': 'PLACEORDER',
            'CSRFToken': csrf
        })
        self.client.post("/checkout/payment-mode/deposit/ajax/contents", name="7-4. 무통장입금", data={
            'CSRFToken': csrf
        })
        self.client.post("/checkout/ajax/getCartContents", name="7-5. 무통장입금", data={
            'CSRFToken': csrf
        })

        #8. 결제하기
        # self.client.post("/checkout/ajax/setDeliveryAddress", name="8-1. 결제하기", data={
        #     'deliveryAddressIds[0]': deliveryAddressId,
        #     'deliveryMessages[0]': '',
        #     'giftMessage': '',
        #     'CSRFToken': csrf
        # })
        # self.client.post("/checkout/ajax/savecart", name="8-2. 결제하기", data={
        #     'paymentMode': 'deposit',
        #     'depositBankCode': 'B04',
        #     'receiptType': 'NO',
        #     'printInvoicePrice': 'true',
        #     'printInvoicePvBv': 'true',
        #     'CSRFToken': csrf
        # })
        # self.client.post("/checkout/ajax/validateCartData", name="8-3. 결제하기", data={
        #     'step': 'CHECKOUT',
        #     'CSRFToken': csrf
        # })
        # self.client.post("/checkout/ajax/placeorder", name="8-4. 결제하기", data={
        #     'paymentMode': 'deposit',
        #     'depositBankCode': 'B04',
        #     'receiptType': 'NO',
        #     'printInvoicePrice': 'true',
        #     'printInvoicePvBv': 'true',
        #     'CSRFToken': csrf
        # })

        # 9. LOS
        # self.client.get("/business-center/los", name="9. los")
        # self.client.get("/message-center/ajax/unread-count", name="4-8. 맞춤메시지")
        # self.client.post("/cart/miniCart/ajax/total", name="4-9. 장바구니갯수", data={
        #     'CSRFToken': csrf
        # })

        #10. 로그아웃
        self.client.get("/logout", name="10. 로그아웃")

        # 11. 검색
        self.client.get("/search/?text=%EC%95%84%EC%84%B8%EB%A1%9C%EB%9D%BC", name="11. 검색")
